---
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro'; // Ensure this import is present
import { getFormattedDate } from '~/utils/utils';
import { getPermalink } from '~/utils/permalinks';
import { fetchPosts } from '~/utils/blog';

export interface Props {
  title?: string;
  count?: number;
  showExcerpt?: boolean;
  showImage?: boolean;
  showDate?: boolean;
  showAuthor?: boolean;
  classes?: Record<string, string>;
}

const {
  title = 'Featured Posts',
  count = 3,
  showExcerpt = true,
  showImage = true,
  showDate = true,
  showAuthor = false,
  classes = {},
} = Astro.props;

// Fetch featured blog posts (posts with featured: true in frontmatter)
let featuredPosts: Post[] = [];

import type { Post } from '~/types';

try {
  const posts = (await fetchPosts()) as Post[];
  if (posts) {
    // Only show posts marked as featured
    featuredPosts = posts.filter((post) => post.featured === true).slice(0, count);
  }
} catch (error) {
  console.error('Error fetching posts:', error);
  featuredPosts = [];
}
---

<aside
  class={`bg-transparent dark:bg-transparent rounded-none shadow-none border-none w-80 ${classes?.container ?? ''}`}
>
  <div class="px-6 py-4 border-b border-gray-200 dark:border-slate-700">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{title}</h3>
  </div>

  <div class="p-6">
    {
      featuredPosts.length === 0 ? (
        <div class="text-center py-8">
          <p class="text-sm text-gray-500 dark:text-slate-400">No featured posts available.</p>
        </div>
      ) : (
        <div class="space-y-6">
          {featuredPosts.map((post, index) => (
            <article
              class={`${index !== featuredPosts.length - 1 ? 'pb-6 border-b border-gray-100 dark:border-slate-800' : ''}`}
            >
              <div class="flex space-x-2">
                {showImage && post.image && (
                  <div class="flex-shrink-0">
                    <a href={getPermalink(post.permalink, 'post')} class="block">
                      <div class="relative w-16 h-16 overflow-hidden rounded-lg bg-transparent dark:bg-transparent">
                        <Image
                          src={post.image}
                          alt={post.title}
                          class="absolute inset-0 w-full h-full object-cover"
                          widths={[64, 128]}
                          width={64}
                          height={64}
                          sizes="64px"
                          aspectRatio="3:2"
                          loading="lazy"
                          decoding="async"
                        />
                      </div>
                    </a>
                  </div>
                )}

                <div class="flex-1 min-w-0">
                  <div class="mb-2">
                    <h4 class="text-sm font-medium leading-snug">
                      <a
                        href={getPermalink(post.permalink, 'post')}
                        class="text-gray-900 dark:text-white hover:text-primary dark:hover:text-blue-400 transition-colors duration-200"
                      >
                        {post.title}
                      </a>
                    </h4>
                  </div>

                  {(showDate || showAuthor) && (
                    <div class="flex items-center text-xs text-gray-500 dark:text-slate-400 mb-2">
                      {showDate && (
                        <div class="flex items-center">
                          <Icon name="tabler:clock" class="w-3 h-3 mr-1" />
                          <time datetime={String(post.publishDate)}>{getFormattedDate(post.publishDate)}</time>
                        </div>
                      )}

                      {showAuthor && post.author && showDate && <span class="mx-2">Â·</span>}

                      {showAuthor && post.author && (
                        <div class="flex items-center">
                          <Icon name="tabler:user" class="w-3 h-3 mr-1" />
                          <span>{post.author.replaceAll('-', ' ')}</span>
                        </div>
                      )}
                    </div>
                  )}

                  {showExcerpt && post.excerpt && (
                    <p class="text-sm text-gray-600 dark:text-slate-300 line-clamp-2 leading-relaxed">{post.excerpt}</p>
                  )}

                  {post.category && (
                    <div class="mt-2">
                      <a
                        href={getPermalink(post.category.slug, 'category')}
                        class="inline-flex items-center px-2 py-1 text-xs font-medium
                                bg-primary/10 text-primary dark:bg-blue-500/10 dark:text-blue-400
                                rounded-full hover:bg-primary/20 dark:hover:bg-blue-500/20 transition-colors duration-200"
                      >
                        {post.category.title}
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </article>
          ))}
        </div>
      )
    }

    <div class="mt-6 pt-4 border-t border-gray-100 dark:border-slate-800">
      <a
        href={getPermalink('/featured')}
        class="inline-flex items-center text-sm font-medium text-gray-600 dark:text-slate-300 hover:text-primary dark:hover:text-blue-400 transition-colors duration-200"
      >
        View all featured posts
        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    </div>
  </div>
</aside>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
