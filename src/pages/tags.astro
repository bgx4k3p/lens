---
export const prerender = true;
import { getCollection } from 'astro:content';
import { getPermalink } from '~/utils/permalinks';
import Layout from '~/layouts/PageLayout.astro'; // ADDED: Import the Layout component

// Define a palette of color classes for the tags
const tagColors = [
  'bg-blue-500/10 text-blue-400 dark:bg-blue-500/20 dark:text-blue-300 hover:bg-blue-500/20 dark:hover:bg-blue-500/30',
  'bg-green-500/10 text-green-400 dark:bg-green-500/20 dark:text-green-300 hover:bg-green-500/20 dark:hover:bg-green-500/30',
  'bg-purple-500/10 text-purple-400 dark:bg-purple-500/20 dark:text-purple-300 hover:bg-purple-500/20 dark:hover:bg-purple-500/30',
  'bg-orange-500/10 text-orange-400 dark:bg-orange-500/20 dark:text-orange-300 hover:bg-orange-500/20 dark:hover:bg-orange-500/30',
  'bg-teal-500/10 text-teal-400 dark:bg-teal-500/20 dark:text-teal-300 hover:bg-teal-500/20 dark:hover:bg-teal-500/30',
  'bg-red-500/10 text-red-400 dark:bg-red-500/20 dark:text-red-300 hover:bg-red-500/20 dark:hover:bg-red-500/30',
  'bg-indigo-500/10 text-indigo-400 dark:bg-indigo-500/20 dark:text-indigo-300 hover:bg-indigo-500/20 dark:hover:bg-indigo-500/30',
];

// 1. Extract all tags and count their frequencies
const allPosts = await getCollection('post');
const tagFrequencies: { [key: string]: number } = {};
allPosts.forEach((post) => {
  const tags = post.data.tags || [];
  tags.forEach((tag: string) => {
    const lowerTag = tag.toLowerCase();
    tagFrequencies[lowerTag] = (tagFrequencies[lowerTag] || 0) + 1;
  });
});

// Convert frequencies to an array of { name: tag, count: frequency } objects
const tagsWithFrequency = Object.entries(tagFrequencies).map(([name, count]) => ({ name, count }));

// Sort tags alphabetically for consistent display
tagsWithFrequency.sort((a, b) => a.name.localeCompare(b.name));

// Determine min/max frequencies for scaling
const minFrequency = Math.min(...tagsWithFrequency.map(t => t.count));
const maxFrequency = Math.max(...tagsWithFrequency.map(t => t.count));

// Define size classes based on frequency tiers
// You can adjust these tiers and classes as needed for your desired visual effect
const getSizeClass = (count: number) => {
  if (maxFrequency === minFrequency) {
    return 'text-base'; // All tags have same frequency
  }
  const range = maxFrequency - minFrequency;
  const normalized = (count - minFrequency) / range; // 0 to 1

  if (normalized > 0.8) return 'text-xl sm:text-2xl lg:text-3xl'; // Very high frequency
  if (normalized > 0.6) return 'text-lg sm:text-xl lg:text-2xl';  // High frequency
  if (normalized > 0.4) return 'text-base sm:text-lg lg:text-xl'; // Medium frequency
  if (normalized > 0.2) return 'text-sm sm:text-base lg:text-lg'; // Low frequency
  return 'text-xs sm:text-sm lg:text-base'; // Very low frequency
};
---

<Layout>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <h1 class="text-3xl font-bold text-center mb-8">Tags Cloud</h1>

    <div class="flex flex-wrap justify-center gap-3">
      {
        tagsWithFrequency.map((tag, index) => (
          <a
            href={getPermalink(`/tag/${tag.name}`)}
            class={`inline-flex items-center rounded-full px-3 py-1 font-semibold shadow-md
                    ${tagColors[index % tagColors.length]}
                    ${getSizeClass(tag.count)}
                    transition-all duration-300 ease-in-out`}
          >
            {tag.name}
          </a>
        ))
      }
    </div>
  </section>
</Layout>
